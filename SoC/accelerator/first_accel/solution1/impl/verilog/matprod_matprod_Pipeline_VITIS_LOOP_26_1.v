// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module matprod_matprod_Pipeline_VITIS_LOOP_26_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        N1,
        trunc_ln6_1,
        m1_buffer_address0,
        m1_buffer_ce0,
        m1_buffer_q0,
        trunc_ln6,
        m2_buffer_address0,
        m2_buffer_ce0,
        m2_buffer_q0,
        N2,
        m3_buffer_address0,
        m3_buffer_ce0,
        m3_buffer_we0,
        m3_buffer_d0,
        N3,
        grp_fu_202_p_din0,
        grp_fu_202_p_din1,
        grp_fu_202_p_dout0,
        grp_fu_202_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] N1;
input  [9:0] trunc_ln6_1;
output  [9:0] m1_buffer_address0;
output   m1_buffer_ce0;
input  [31:0] m1_buffer_q0;
input  [9:0] trunc_ln6;
output  [9:0] m2_buffer_address0;
output   m2_buffer_ce0;
input  [31:0] m2_buffer_q0;
input  [31:0] N2;
output  [9:0] m3_buffer_address0;
output   m3_buffer_ce0;
output   m3_buffer_we0;
output  [31:0] m3_buffer_d0;
input  [31:0] N3;
output  [31:0] grp_fu_202_p_din0;
output  [31:0] grp_fu_202_p_din1;
input  [31:0] grp_fu_202_p_dout0;
output   grp_fu_202_p_ce;

reg ap_idle;
reg m1_buffer_ce0;
reg m2_buffer_ce0;
reg m3_buffer_ce0;
reg m3_buffer_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln26_fu_143_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [31:0] regc;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] i_2_reg_337;
wire   [9:0] trunc_ln17_fu_154_p1;
reg   [9:0] trunc_ln17_reg_346;
reg   [9:0] trunc_ln17_reg_346_pp0_iter2_reg;
wire  signed [9:0] trunc_ln17_1_fu_158_p1;
reg  signed [9:0] trunc_ln17_1_reg_352;
reg  signed [9:0] trunc_ln17_1_reg_352_pp0_iter2_reg;
wire  signed [9:0] trunc_ln17_2_fu_162_p1;
wire   [0:0] icmp_ln30_fu_166_p2;
reg   [0:0] icmp_ln30_reg_364;
reg   [0:0] icmp_ln30_reg_364_pp0_iter2_reg;
reg   [0:0] icmp_ln30_reg_364_pp0_iter3_reg;
reg   [0:0] icmp_ln30_reg_364_pp0_iter4_reg;
reg   [0:0] icmp_ln30_reg_364_pp0_iter5_reg;
reg   [0:0] icmp_ln30_reg_364_pp0_iter6_reg;
reg   [0:0] icmp_ln30_reg_364_pp0_iter7_reg;
wire   [0:0] icmp_ln33_fu_178_p2;
reg   [0:0] icmp_ln33_reg_369;
reg   [0:0] icmp_ln33_reg_369_pp0_iter2_reg;
reg   [0:0] icmp_ln33_reg_369_pp0_iter3_reg;
reg   [0:0] icmp_ln33_reg_369_pp0_iter4_reg;
reg   [0:0] icmp_ln33_reg_369_pp0_iter5_reg;
reg   [0:0] icmp_ln33_reg_369_pp0_iter6_reg;
reg   [0:0] icmp_ln33_reg_369_pp0_iter7_reg;
wire   [31:0] j_1_fu_188_p2;
reg   [31:0] j_1_reg_373;
wire   [0:0] icmp_ln37_fu_194_p2;
reg   [0:0] icmp_ln37_reg_378;
wire   [31:0] add_ln37_fu_199_p2;
reg   [31:0] add_ln37_reg_384;
wire   [9:0] grp_fu_283_p3;
reg  signed [9:0] add_ln35_reg_399;
reg  signed [9:0] add_ln35_reg_399_pp0_iter5_reg;
reg  signed [9:0] add_ln35_reg_399_pp0_iter6_reg;
reg  signed [9:0] add_ln35_reg_399_pp0_iter7_reg;
reg  signed [31:0] m1_buffer_load_reg_404;
reg  signed [31:0] m2_buffer_load_reg_409;
reg   [31:0] mul_reg_414;
wire   [63:0] zext_ln29_fu_231_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln29_1_fu_235_p1;
wire   [63:0] zext_ln35_fu_265_p1;
wire   [31:0] select_ln30_fu_252_p3;
reg   [31:0] k_fu_44;
wire   [31:0] k_1_fu_172_p2;
wire    ap_loop_init;
reg   [31:0] j_fu_48;
wire   [31:0] j_2_fu_215_p3;
reg   [31:0] ap_sig_allocacmp_j_load;
reg   [31:0] i_fu_52;
wire   [31:0] i_3_fu_210_p3;
reg   [31:0] ap_sig_allocacmp_i_2;
wire  signed [9:0] zext_ln29_fu_231_p0;
wire   [9:0] grp_fu_269_p3;
wire  signed [9:0] zext_ln29_1_fu_235_p0;
wire   [9:0] grp_fu_276_p3;
wire   [31:0] add_ln31_fu_247_p2;
wire  signed [9:0] grp_fu_276_p0;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 regc = 32'd0;
#0 ap_done_reg = 1'b0;
end

matprod_mac_muladd_10s_10s_10s_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
mac_muladd_10s_10s_10s_10_4_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln17_2_fu_162_p1),
    .din1(trunc_ln6_1),
    .din2(trunc_ln17_1_reg_352_pp0_iter2_reg),
    .ce(1'b1),
    .dout(grp_fu_269_p3)
);

matprod_mac_muladd_10s_10s_10ns_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
mac_muladd_10s_10s_10ns_10_4_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_276_p0),
    .din1(trunc_ln6),
    .din2(trunc_ln17_reg_346_pp0_iter2_reg),
    .ce(1'b1),
    .dout(grp_fu_276_p3)
);

matprod_mac_muladd_10s_10s_10ns_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
mac_muladd_10s_10s_10ns_10_4_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln17_2_fu_162_p1),
    .din1(trunc_ln6),
    .din2(trunc_ln17_reg_346_pp0_iter2_reg),
    .ce(1'b1),
    .dout(grp_fu_283_p3)
);

matprod_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            i_fu_52 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln33_reg_369 == 1'd1))) begin
            i_fu_52 <= i_3_fu_210_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            j_fu_48 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln33_reg_369 == 1'd1))) begin
            j_fu_48 <= j_2_fu_215_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln26_fu_143_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln33_fu_178_p2 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        k_fu_44 <= 32'd0;
    end else if (((icmp_ln26_fu_143_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln33_fu_178_p2 == 1'd0))) begin
        k_fu_44 <= k_1_fu_172_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln33_reg_369_pp0_iter3_reg == 1'd1))) begin
        add_ln35_reg_399 <= grp_fu_283_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln35_reg_399_pp0_iter5_reg <= add_ln35_reg_399;
        add_ln35_reg_399_pp0_iter6_reg <= add_ln35_reg_399_pp0_iter5_reg;
        add_ln35_reg_399_pp0_iter7_reg <= add_ln35_reg_399_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        icmp_ln30_reg_364_pp0_iter2_reg <= icmp_ln30_reg_364;
        icmp_ln30_reg_364_pp0_iter3_reg <= icmp_ln30_reg_364_pp0_iter2_reg;
        icmp_ln30_reg_364_pp0_iter4_reg <= icmp_ln30_reg_364_pp0_iter3_reg;
        icmp_ln30_reg_364_pp0_iter5_reg <= icmp_ln30_reg_364_pp0_iter4_reg;
        icmp_ln30_reg_364_pp0_iter6_reg <= icmp_ln30_reg_364_pp0_iter5_reg;
        icmp_ln30_reg_364_pp0_iter7_reg <= icmp_ln30_reg_364_pp0_iter6_reg;
        icmp_ln33_reg_369_pp0_iter2_reg <= icmp_ln33_reg_369;
        icmp_ln33_reg_369_pp0_iter3_reg <= icmp_ln33_reg_369_pp0_iter2_reg;
        icmp_ln33_reg_369_pp0_iter4_reg <= icmp_ln33_reg_369_pp0_iter3_reg;
        icmp_ln33_reg_369_pp0_iter5_reg <= icmp_ln33_reg_369_pp0_iter4_reg;
        icmp_ln33_reg_369_pp0_iter6_reg <= icmp_ln33_reg_369_pp0_iter5_reg;
        icmp_ln33_reg_369_pp0_iter7_reg <= icmp_ln33_reg_369_pp0_iter6_reg;
        m1_buffer_load_reg_404 <= m1_buffer_q0;
        m2_buffer_load_reg_409 <= m2_buffer_q0;
        mul_reg_414 <= grp_fu_202_p_dout0;
        trunc_ln17_1_reg_352_pp0_iter2_reg <= trunc_ln17_1_reg_352;
        trunc_ln17_reg_346_pp0_iter2_reg <= trunc_ln17_reg_346;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_143_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln33_fu_178_p2 == 1'd1))) begin
        add_ln37_reg_384 <= add_ln37_fu_199_p2;
        icmp_ln37_reg_378 <= icmp_ln37_fu_194_p2;
        j_1_reg_373 <= j_1_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        i_2_reg_337 <= ap_sig_allocacmp_i_2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_143_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln30_reg_364 <= icmp_ln30_fu_166_p2;
        icmp_ln33_reg_369 <= icmp_ln33_fu_178_p2;
        trunc_ln17_1_reg_352 <= trunc_ln17_1_fu_158_p1;
        trunc_ln17_reg_346 <= trunc_ln17_fu_154_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        regc <= select_ln30_fu_252_p3;
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_143_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln33_reg_369 == 1'd1))) begin
        ap_sig_allocacmp_i_2 = i_3_fu_210_p3;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_52;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln33_reg_369 == 1'd1))) begin
        ap_sig_allocacmp_j_load = j_2_fu_215_p3;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_48;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        m1_buffer_ce0 = 1'b1;
    end else begin
        m1_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        m2_buffer_ce0 = 1'b1;
    end else begin
        m2_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        m3_buffer_ce0 = 1'b1;
    end else begin
        m3_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln33_reg_369_pp0_iter7_reg == 1'd1))) begin
        m3_buffer_we0 = 1'b1;
    end else begin
        m3_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln31_fu_247_p2 = (regc + mul_reg_414);

assign add_ln37_fu_199_p2 = (ap_sig_allocacmp_i_2 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign grp_fu_202_p_ce = 1'b1;

assign grp_fu_202_p_din0 = m2_buffer_load_reg_409;

assign grp_fu_202_p_din1 = m1_buffer_load_reg_404;

assign grp_fu_276_p0 = k_fu_44[9:0];

assign i_3_fu_210_p3 = ((icmp_ln37_reg_378[0:0] == 1'b1) ? add_ln37_reg_384 : i_2_reg_337);

assign icmp_ln26_fu_143_p2 = (($signed(ap_sig_allocacmp_i_2) < $signed(N1)) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_166_p2 = ((k_fu_44 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_178_p2 = ((k_1_fu_172_p2 == N2) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_194_p2 = ((j_1_fu_188_p2 == N3) ? 1'b1 : 1'b0);

assign j_1_fu_188_p2 = (ap_sig_allocacmp_j_load + 32'd1);

assign j_2_fu_215_p3 = ((icmp_ln37_reg_378[0:0] == 1'b1) ? 32'd0 : j_1_reg_373);

assign k_1_fu_172_p2 = (k_fu_44 + 32'd1);

assign m1_buffer_address0 = zext_ln29_fu_231_p1;

assign m2_buffer_address0 = zext_ln29_1_fu_235_p1;

assign m3_buffer_address0 = zext_ln35_fu_265_p1;

assign m3_buffer_d0 = ((icmp_ln30_reg_364_pp0_iter7_reg[0:0] == 1'b1) ? mul_reg_414 : add_ln31_fu_247_p2);

assign select_ln30_fu_252_p3 = ((icmp_ln30_reg_364_pp0_iter7_reg[0:0] == 1'b1) ? mul_reg_414 : add_ln31_fu_247_p2);

assign trunc_ln17_1_fu_158_p1 = k_fu_44[9:0];

assign trunc_ln17_2_fu_162_p1 = ap_sig_allocacmp_i_2[9:0];

assign trunc_ln17_fu_154_p1 = ap_sig_allocacmp_j_load[9:0];

assign zext_ln29_1_fu_235_p0 = grp_fu_276_p3;

assign zext_ln29_1_fu_235_p1 = $unsigned(zext_ln29_1_fu_235_p0);

assign zext_ln29_fu_231_p0 = grp_fu_269_p3;

assign zext_ln29_fu_231_p1 = $unsigned(zext_ln29_fu_231_p0);

assign zext_ln35_fu_265_p1 = $unsigned(add_ln35_reg_399_pp0_iter7_reg);

endmodule //matprod_matprod_Pipeline_VITIS_LOOP_26_1
