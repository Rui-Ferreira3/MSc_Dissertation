-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axi4_conv2D_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    image_in_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    image_in_ce0 : OUT STD_LOGIC;
    image_in_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    image_in_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    image_in_ce1 : OUT STD_LOGIC;
    image_in_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    sext_ln186 : IN STD_LOGIC_VECTOR (7 downto 0);
    sext_ln186_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    sext_ln186_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    sext_ln186_3 : IN STD_LOGIC_VECTOR (7 downto 0);
    sext_ln186_4 : IN STD_LOGIC_VECTOR (7 downto 0);
    sext_ln186_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    sext_ln186_6 : IN STD_LOGIC_VECTOR (7 downto 0);
    sext_ln186_7 : IN STD_LOGIC_VECTOR (7 downto 0);
    sext_ln186_8 : IN STD_LOGIC_VECTOR (7 downto 0);
    acc_V : IN STD_LOGIC_VECTOR (20 downto 0);
    trunc_ln : IN STD_LOGIC_VECTOR (7 downto 0);
    image_out_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    image_out_ce0 : OUT STD_LOGIC;
    image_out_we0 : OUT STD_LOGIC;
    image_out_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of axi4_conv2D_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv6_C : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_const_lv6_D : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_const_lv6_E : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal icmp_ln9_reg_991 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln186_8_cast_fu_286_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln186_8_cast_reg_946 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln186_7_cast_fu_290_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln186_7_cast_reg_951 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln186_6_cast_fu_294_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln186_6_cast_reg_956 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln186_5_cast_fu_298_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln186_5_cast_reg_961 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln186_4_cast_fu_302_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln186_4_cast_reg_966 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln186_3_cast_fu_306_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln186_3_cast_reg_971 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln186_2_cast_fu_310_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln186_2_cast_reg_976 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln186_1_cast_fu_314_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln186_1_cast_reg_981 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln186_cast_fu_318_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln186_cast_reg_986 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln9_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_load_reg_995 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv34_load_reg_1000 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1027_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_1006 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_1006_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln9_1_fu_382_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln9_1_reg_1014 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln9_fu_388_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln9_reg_1019 : STD_LOGIC_VECTOR (4 downto 0);
    signal image_in_load_reg_1038 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal mul_ln1494_1_fu_426_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1494_1_reg_1043 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln840_1_fu_431_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln840_1_reg_1048 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1494_2_fu_459_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1494_2_reg_1063 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal trunc_ln840_2_fu_464_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln840_2_reg_1068 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1494_3_fu_472_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1494_3_reg_1073 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln840_3_fu_477_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln840_3_reg_1078 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvars_iv17_cast_fu_501_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvars_iv17_cast_reg_1093 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal mul_ln1494_4_fu_508_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1494_4_reg_1098 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln840_4_fu_513_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln840_4_reg_1103 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1494_5_fu_521_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1494_5_reg_1108 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln840_5_fu_526_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln840_5_reg_1113 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln186_3_fu_556_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln186_3_reg_1128 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1494_6_fu_587_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1494_6_reg_1133 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal trunc_ln840_6_fu_592_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln840_6_reg_1138 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1494_7_fu_600_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1494_7_reg_1143 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln840_7_fu_605_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln840_7_reg_1148 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln840_7_fu_619_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln840_7_reg_1158 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1494_8_fu_645_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1494_8_reg_1163 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln840_8_fu_650_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln840_8_reg_1168 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln840_6_fu_654_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln840_6_reg_1173 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln840_8_fu_662_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln840_8_reg_1178 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln840_10_fu_696_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln840_10_reg_1183 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln840_12_fu_712_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln840_12_reg_1188 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln186_1_fu_718_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln186_1_reg_1193 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln186_7_fu_727_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln186_7_reg_1198 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln840_14_fu_756_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln840_14_reg_1203 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_reg_1208 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln186_8_fu_776_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln186_8_reg_1213 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal indvars_iv17_cast23_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln186_9_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln186_10_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln186_11_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln186_12_fu_486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln186_13_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln186_14_fu_536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln186_15_fu_547_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln186_16_fu_614_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln541_fu_873_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal rhs_fu_102 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_V_fu_878_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal indvars_iv17_fu_106 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln840_fu_401_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_indvars_iv17_load : STD_LOGIC_VECTOR (4 downto 0);
    signal i_V_fu_110 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln9_2_fu_800_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvars_iv_fu_114 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln9_4_fu_572_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_indvars_iv_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv34_fu_118 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln9_3_fu_566_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_indvars_iv34_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_122 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln9_fu_361_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln1494_1_fu_426_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1494_1_fu_426_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln840_1_fu_435_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln14_fu_445_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln1494_2_fu_459_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1494_2_fu_459_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1494_3_fu_472_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1494_3_fu_472_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln840_2_fu_481_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln840_3_fu_491_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln1494_4_fu_508_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1494_4_fu_508_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1494_5_fu_521_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1494_5_fu_521_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln14_1_fu_530_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln840_4_fu_541_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln186_2_fu_552_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln9_2_fu_561_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln1494_6_fu_587_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1494_6_fu_587_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1494_7_fu_600_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1494_7_fu_600_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln840_5_fu_609_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln840_5_fu_580_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln840_4_fu_577_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1494_8_fu_645_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1494_8_fu_645_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln840_6_fu_635_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln840_9_fu_659_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln840_7_fu_638_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1494_fu_671_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1494_fu_671_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1494_fu_671_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln840_3_fu_690_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln840_fu_676_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln840_1_fu_684_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln840_8_fu_693_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln840_11_fu_702_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln840_12_fu_708_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln840_2_fu_687_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln840_fu_680_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln186_6_fu_723_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln840_10_fu_732_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln840_13_fu_743_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln840_11_fu_740_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln840_13_fu_746_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln840_14_fu_752_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln840_9_fu_735_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln186_5_fu_772_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln840_15_fu_794_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln9_fu_807_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln186_4_fu_831_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1035_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_824_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1035_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1035_fu_840_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln186_fu_835_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln9_1_fu_787_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal lhs_mid2_fu_811_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1495_fu_863_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_fu_867_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln1494_1_fu_426_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1494_2_fu_459_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1494_3_fu_472_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1494_4_fu_508_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1494_5_fu_521_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1494_6_fu_587_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1494_7_fu_600_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1494_8_fu_645_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1494_fu_671_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component axi4_conv2D_mul_8ns_8s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component axi4_conv2D_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_8ns_8s_16_1_1_U1 : component axi4_conv2D_mul_8ns_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln1494_1_fu_426_p0,
        din1 => mul_ln1494_1_fu_426_p1,
        dout => mul_ln1494_1_fu_426_p2);

    mul_8ns_8s_16_1_1_U2 : component axi4_conv2D_mul_8ns_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln1494_2_fu_459_p0,
        din1 => mul_ln1494_2_fu_459_p1,
        dout => mul_ln1494_2_fu_459_p2);

    mul_8ns_8s_16_1_1_U3 : component axi4_conv2D_mul_8ns_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln1494_3_fu_472_p0,
        din1 => mul_ln1494_3_fu_472_p1,
        dout => mul_ln1494_3_fu_472_p2);

    mul_8ns_8s_16_1_1_U4 : component axi4_conv2D_mul_8ns_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln1494_4_fu_508_p0,
        din1 => mul_ln1494_4_fu_508_p1,
        dout => mul_ln1494_4_fu_508_p2);

    mul_8ns_8s_16_1_1_U5 : component axi4_conv2D_mul_8ns_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln1494_5_fu_521_p0,
        din1 => mul_ln1494_5_fu_521_p1,
        dout => mul_ln1494_5_fu_521_p2);

    mul_8ns_8s_16_1_1_U6 : component axi4_conv2D_mul_8ns_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln1494_6_fu_587_p0,
        din1 => mul_ln1494_6_fu_587_p1,
        dout => mul_ln1494_6_fu_587_p2);

    mul_8ns_8s_16_1_1_U7 : component axi4_conv2D_mul_8ns_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln1494_7_fu_600_p0,
        din1 => mul_ln1494_7_fu_600_p1,
        dout => mul_ln1494_7_fu_600_p2);

    mul_8ns_8s_16_1_1_U8 : component axi4_conv2D_mul_8ns_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln1494_8_fu_645_p0,
        din1 => mul_ln1494_8_fu_645_p1,
        dout => mul_ln1494_8_fu_645_p2);

    mul_8ns_8s_16_1_1_U9 : component axi4_conv2D_mul_8ns_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln1494_fu_671_p0,
        din1 => mul_ln1494_fu_671_p1,
        dout => mul_ln1494_fu_671_p2);

    flow_control_loop_pipe_sequential_init_U : component axi4_conv2D_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_V_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_V_fu_110 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                i_V_fu_110 <= select_ln9_2_fu_800_p3;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln9_fu_355_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_122 <= add_ln9_fu_361_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_122 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    indvars_iv17_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln9_fu_355_p2 = ap_const_lv1_0))) then 
                    indvars_iv17_fu_106 <= add_ln840_fu_401_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvars_iv17_fu_106 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    indvars_iv34_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvars_iv34_fu_118 <= ap_const_lv5_4;
            elsif (((icmp_ln9_reg_991 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                indvars_iv34_fu_118 <= select_ln9_3_fu_566_p3;
            end if; 
        end if;
    end process;

    indvars_iv_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvars_iv_fu_114 <= ap_const_lv5_0;
            elsif (((icmp_ln9_reg_991 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                indvars_iv_fu_114 <= select_ln9_4_fu_572_p3;
            end if; 
        end if;
    end process;

    rhs_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                rhs_fu_102 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                rhs_fu_102 <= j_V_fu_878_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln186_1_reg_1193 <= add_ln186_1_fu_718_p2;
                add_ln186_7_reg_1198 <= add_ln186_7_fu_727_p2;
                add_ln840_10_reg_1183 <= add_ln840_10_fu_696_p2;
                add_ln840_12_reg_1188 <= add_ln840_12_fu_712_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_991 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln186_3_reg_1128 <= add_ln186_3_fu_556_p2;
                    indvars_iv17_cast_reg_1093(4 downto 0) <= indvars_iv17_cast_fu_501_p1(4 downto 0);
                mul_ln1494_4_reg_1098 <= mul_ln1494_4_fu_508_p2;
                mul_ln1494_5_reg_1108 <= mul_ln1494_5_fu_521_p2;
                trunc_ln840_4_reg_1103 <= trunc_ln840_4_fu_513_p1;
                trunc_ln840_5_reg_1113 <= trunc_ln840_5_fu_526_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln186_8_reg_1213 <= add_ln186_8_fu_776_p2;
                add_ln840_14_reg_1203 <= add_ln840_14_fu_756_p2;
                tmp_reg_1208 <= add_ln840_14_fu_756_p2(20 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln840_6_reg_1173 <= add_ln840_6_fu_654_p2;
                add_ln840_8_reg_1178 <= add_ln840_8_fu_662_p2;
                icmp_ln1027_reg_1006_pp0_iter1_reg <= icmp_ln1027_reg_1006;
                icmp_ln9_reg_991 <= icmp_ln9_fu_355_p2;
                mul_ln1494_8_reg_1163 <= mul_ln1494_8_fu_645_p2;
                sext_ln186_1_cast_reg_981 <= sext_ln186_1_cast_fu_314_p1;
                sext_ln186_2_cast_reg_976 <= sext_ln186_2_cast_fu_310_p1;
                sext_ln186_3_cast_reg_971 <= sext_ln186_3_cast_fu_306_p1;
                sext_ln186_4_cast_reg_966 <= sext_ln186_4_cast_fu_302_p1;
                sext_ln186_5_cast_reg_961 <= sext_ln186_5_cast_fu_298_p1;
                sext_ln186_6_cast_reg_956 <= sext_ln186_6_cast_fu_294_p1;
                sext_ln186_7_cast_reg_951 <= sext_ln186_7_cast_fu_290_p1;
                sext_ln186_8_cast_reg_946 <= sext_ln186_8_cast_fu_286_p1;
                sext_ln186_cast_reg_986 <= sext_ln186_cast_fu_318_p1;
                trunc_ln840_8_reg_1168 <= trunc_ln840_8_fu_650_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_991 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln840_7_reg_1158 <= add_ln840_7_fu_619_p2;
                mul_ln1494_6_reg_1133 <= mul_ln1494_6_fu_587_p2;
                mul_ln1494_7_reg_1143 <= mul_ln1494_7_fu_600_p2;
                trunc_ln840_6_reg_1138 <= trunc_ln840_6_fu_592_p1;
                trunc_ln840_7_reg_1148 <= trunc_ln840_7_fu_605_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln9_fu_355_p2 = ap_const_lv1_0))) then
                add_ln9_1_reg_1014 <= add_ln9_1_fu_382_p2;
                icmp_ln1027_reg_1006 <= icmp_ln1027_fu_376_p2;
                indvars_iv34_load_reg_1000 <= ap_sig_allocacmp_indvars_iv34_load;
                indvars_iv_load_reg_995 <= ap_sig_allocacmp_indvars_iv_load;
                select_ln9_reg_1019 <= select_ln9_fu_388_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_991 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                image_in_load_reg_1038 <= image_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_991 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_ln1494_1_reg_1043 <= mul_ln1494_1_fu_426_p2;
                trunc_ln840_1_reg_1048 <= trunc_ln840_1_fu_431_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_991 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul_ln1494_2_reg_1063 <= mul_ln1494_2_fu_459_p2;
                mul_ln1494_3_reg_1073 <= mul_ln1494_3_fu_472_p2;
                trunc_ln840_2_reg_1068 <= trunc_ln840_2_fu_464_p1;
                trunc_ln840_3_reg_1078 <= trunc_ln840_3_fu_477_p1;
            end if;
        end if;
    end process;
    indvars_iv17_cast_reg_1093(5) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_condition_exit_pp0_iter0_stage3, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln14_1_fu_530_p2 <= std_logic_vector(unsigned(indvars_iv17_cast_fu_501_p1) + unsigned(ap_const_lv6_C));
    add_ln14_fu_445_p2 <= std_logic_vector(unsigned(select_ln9_reg_1019) + unsigned(ap_const_lv5_6));
    add_ln186_1_fu_718_p2 <= std_logic_vector(unsigned(trunc_ln840_fu_680_p1) + unsigned(trunc_ln));
    add_ln186_2_fu_552_p2 <= std_logic_vector(unsigned(trunc_ln840_2_reg_1068) + unsigned(trunc_ln840_3_reg_1078));
    add_ln186_3_fu_556_p2 <= std_logic_vector(unsigned(add_ln186_2_fu_552_p2) + unsigned(trunc_ln840_1_reg_1048));
    add_ln186_4_fu_831_p2 <= std_logic_vector(unsigned(add_ln186_3_reg_1128) + unsigned(add_ln186_1_reg_1193));
    add_ln186_5_fu_772_p2 <= std_logic_vector(unsigned(trunc_ln840_4_reg_1103) + unsigned(trunc_ln840_5_reg_1113));
    add_ln186_6_fu_723_p2 <= std_logic_vector(unsigned(trunc_ln840_7_reg_1148) + unsigned(trunc_ln840_8_reg_1168));
    add_ln186_7_fu_727_p2 <= std_logic_vector(unsigned(add_ln186_6_fu_723_p2) + unsigned(trunc_ln840_6_reg_1138));
    add_ln186_8_fu_776_p2 <= std_logic_vector(unsigned(add_ln186_7_reg_1198) + unsigned(add_ln186_5_fu_772_p2));
    add_ln186_fu_835_p2 <= std_logic_vector(unsigned(add_ln186_8_reg_1213) + unsigned(add_ln186_4_fu_831_p2));
    add_ln840_10_fu_696_p2 <= std_logic_vector(signed(sext_ln840_3_fu_690_p1) + signed(sext_ln840_fu_676_p1));
    add_ln840_11_fu_702_p2 <= std_logic_vector(signed(sext_ln840_1_fu_684_p1) + signed(sext_ln840_8_fu_693_p1));
    add_ln840_12_fu_712_p2 <= std_logic_vector(signed(sext_ln840_12_fu_708_p1) + signed(sext_ln840_2_fu_687_p1));
    add_ln840_13_fu_746_p2 <= std_logic_vector(signed(sext_ln840_13_fu_743_p1) + signed(sext_ln840_11_fu_740_p1));
    add_ln840_14_fu_756_p2 <= std_logic_vector(signed(sext_ln840_14_fu_752_p1) + signed(add_ln840_9_fu_735_p2));
    add_ln840_15_fu_794_p2 <= std_logic_vector(unsigned(i_V_fu_110) + unsigned(ap_const_lv3_1));
    add_ln840_1_fu_435_p2 <= std_logic_vector(unsigned(select_ln9_reg_1019) + unsigned(ap_const_lv5_2));
    add_ln840_2_fu_481_p2 <= std_logic_vector(unsigned(select_ln9_reg_1019) + unsigned(ap_const_lv5_7));
    add_ln840_3_fu_491_p2 <= std_logic_vector(unsigned(select_ln9_reg_1019) + unsigned(ap_const_lv5_8));
    add_ln840_4_fu_541_p2 <= std_logic_vector(unsigned(indvars_iv17_cast_fu_501_p1) + unsigned(ap_const_lv6_D));
    add_ln840_5_fu_609_p2 <= std_logic_vector(unsigned(indvars_iv17_cast_reg_1093) + unsigned(ap_const_lv6_E));
    add_ln840_6_fu_654_p2 <= std_logic_vector(unsigned(acc_V) + unsigned(sext_ln840_6_fu_635_p1));
    add_ln840_7_fu_619_p2 <= std_logic_vector(signed(sext_ln840_5_fu_580_p1) + signed(sext_ln840_4_fu_577_p1));
    add_ln840_8_fu_662_p2 <= std_logic_vector(signed(sext_ln840_9_fu_659_p1) + signed(sext_ln840_7_fu_638_p1));
    add_ln840_9_fu_735_p2 <= std_logic_vector(signed(sext_ln840_10_fu_732_p1) + signed(add_ln840_6_reg_1173));
    add_ln840_fu_401_p2 <= std_logic_vector(unsigned(select_ln9_fu_388_p3) + unsigned(ap_const_lv5_1));
    add_ln9_1_fu_382_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvars_iv_load) + unsigned(ap_const_lv5_6));
    add_ln9_2_fu_561_p2 <= std_logic_vector(unsigned(indvars_iv34_load_reg_1000) + unsigned(ap_const_lv5_6));
    add_ln9_fu_361_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, icmp_ln9_reg_991)
    begin
        if (((icmp_ln9_reg_991 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_122)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_122;
        end if; 
    end process;


    ap_sig_allocacmp_indvars_iv17_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvars_iv17_fu_106)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvars_iv17_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_indvars_iv17_load <= indvars_iv17_fu_106;
        end if; 
    end process;


    ap_sig_allocacmp_indvars_iv34_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvars_iv34_fu_118)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvars_iv34_load <= ap_const_lv5_4;
        else 
            ap_sig_allocacmp_indvars_iv34_load <= indvars_iv34_fu_118;
        end if; 
    end process;


    ap_sig_allocacmp_indvars_iv_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvars_iv_fu_114)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvars_iv_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_indvars_iv_load <= indvars_iv_fu_114;
        end if; 
    end process;

    icmp_ln1027_fu_376_p2 <= "1" when (ap_sig_allocacmp_indvars_iv17_load = ap_sig_allocacmp_indvars_iv34_load) else "0";
    icmp_ln1035_fu_819_p2 <= "1" when (signed(tmp_reg_1208) > signed(ap_const_lv13_0)) else "0";
    icmp_ln9_fu_355_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv5_10) else "0";

    image_in_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln186_9_fu_407_p1, ap_block_pp0_stage1, zext_ln186_11_fu_450_p1, ap_block_pp0_stage2, zext_ln186_13_fu_496_p1, ap_block_pp0_stage3, zext_ln186_15_fu_547_p1, zext_ln186_16_fu_614_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                image_in_address0 <= zext_ln186_16_fu_614_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                image_in_address0 <= zext_ln186_15_fu_547_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                image_in_address0 <= zext_ln186_13_fu_496_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                image_in_address0 <= zext_ln186_11_fu_450_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                image_in_address0 <= zext_ln186_9_fu_407_p1(6 - 1 downto 0);
            else 
                image_in_address0 <= "XXXXXX";
            end if;
        else 
            image_in_address0 <= "XXXXXX";
        end if; 
    end process;


    image_in_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, indvars_iv17_cast23_fu_396_p1, ap_block_pp0_stage0, zext_ln186_10_fu_440_p1, ap_block_pp0_stage1, zext_ln186_12_fu_486_p1, ap_block_pp0_stage2, zext_ln186_14_fu_536_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                image_in_address1 <= zext_ln186_14_fu_536_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                image_in_address1 <= zext_ln186_12_fu_486_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                image_in_address1 <= zext_ln186_10_fu_440_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                image_in_address1 <= indvars_iv17_cast23_fu_396_p1(6 - 1 downto 0);
            else 
                image_in_address1 <= "XXXXXX";
            end if;
        else 
            image_in_address1 <= "XXXXXX";
        end if; 
    end process;


    image_in_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            image_in_ce0 <= ap_const_logic_1;
        else 
            image_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_in_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            image_in_ce1 <= ap_const_logic_1;
        else 
            image_in_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    image_out_address0 <= zext_ln541_fu_873_p1(4 - 1 downto 0);

    image_out_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            image_out_ce0 <= ap_const_logic_1;
        else 
            image_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    image_out_d0 <= 
        select_ln1035_fu_840_p3 when (or_ln1035_fu_848_p2(0) = '1') else 
        add_ln186_fu_835_p2;

    image_out_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            image_out_we0 <= ap_const_logic_1;
        else 
            image_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    indvars_iv17_cast23_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln9_fu_388_p3),64));
    indvars_iv17_cast_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln9_reg_1019),6));
    j_V_fu_878_p2 <= std_logic_vector(unsigned(select_ln9_1_fu_787_p3) + unsigned(ap_const_lv3_1));
    lhs_mid2_fu_811_p3 <= (trunc_ln9_fu_807_p1 & ap_const_lv2_0);
    mul_ln1494_1_fu_426_p0 <= mul_ln1494_1_fu_426_p00(8 - 1 downto 0);
    mul_ln1494_1_fu_426_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_in_q0),16));
    mul_ln1494_1_fu_426_p1 <= sext_ln186_1_cast_reg_981(8 - 1 downto 0);
    mul_ln1494_2_fu_459_p0 <= mul_ln1494_2_fu_459_p00(8 - 1 downto 0);
    mul_ln1494_2_fu_459_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_in_q1),16));
    mul_ln1494_2_fu_459_p1 <= sext_ln186_2_cast_reg_976(8 - 1 downto 0);
    mul_ln1494_3_fu_472_p0 <= mul_ln1494_3_fu_472_p00(8 - 1 downto 0);
    mul_ln1494_3_fu_472_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_in_q0),16));
    mul_ln1494_3_fu_472_p1 <= sext_ln186_3_cast_reg_971(8 - 1 downto 0);
    mul_ln1494_4_fu_508_p0 <= mul_ln1494_4_fu_508_p00(8 - 1 downto 0);
    mul_ln1494_4_fu_508_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_in_q1),16));
    mul_ln1494_4_fu_508_p1 <= sext_ln186_4_cast_reg_966(8 - 1 downto 0);
    mul_ln1494_5_fu_521_p0 <= mul_ln1494_5_fu_521_p00(8 - 1 downto 0);
    mul_ln1494_5_fu_521_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_in_q0),16));
    mul_ln1494_5_fu_521_p1 <= sext_ln186_5_cast_reg_961(8 - 1 downto 0);
    mul_ln1494_6_fu_587_p0 <= mul_ln1494_6_fu_587_p00(8 - 1 downto 0);
    mul_ln1494_6_fu_587_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_in_q1),16));
    mul_ln1494_6_fu_587_p1 <= sext_ln186_6_cast_reg_956(8 - 1 downto 0);
    mul_ln1494_7_fu_600_p0 <= mul_ln1494_7_fu_600_p00(8 - 1 downto 0);
    mul_ln1494_7_fu_600_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_in_q0),16));
    mul_ln1494_7_fu_600_p1 <= sext_ln186_7_cast_reg_951(8 - 1 downto 0);
    mul_ln1494_8_fu_645_p0 <= mul_ln1494_8_fu_645_p00(8 - 1 downto 0);
    mul_ln1494_8_fu_645_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_in_q0),16));
    mul_ln1494_8_fu_645_p1 <= sext_ln186_8_cast_reg_946(8 - 1 downto 0);
    mul_ln1494_fu_671_p0 <= mul_ln1494_fu_671_p00(8 - 1 downto 0);
    mul_ln1494_fu_671_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_in_load_reg_1038),16));
    mul_ln1494_fu_671_p1 <= sext_ln186_cast_reg_986(8 - 1 downto 0);
    or_ln1035_fu_848_p2 <= (tmp_1_fu_824_p3 or icmp_ln1035_fu_819_p2);
    ret_V_fu_867_p2 <= std_logic_vector(unsigned(lhs_mid2_fu_811_p3) + unsigned(zext_ln1495_fu_863_p1));
    select_ln1035_fu_840_p3 <= 
        ap_const_lv8_FF when (icmp_ln1035_fu_819_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln9_1_fu_787_p3 <= 
        ap_const_lv3_0 when (icmp_ln1027_reg_1006_pp0_iter1_reg(0) = '1') else 
        rhs_fu_102;
    select_ln9_2_fu_800_p3 <= 
        add_ln840_15_fu_794_p2 when (icmp_ln1027_reg_1006_pp0_iter1_reg(0) = '1') else 
        i_V_fu_110;
    select_ln9_3_fu_566_p3 <= 
        add_ln9_2_fu_561_p2 when (icmp_ln1027_reg_1006(0) = '1') else 
        indvars_iv34_load_reg_1000;
    select_ln9_4_fu_572_p3 <= 
        add_ln9_1_reg_1014 when (icmp_ln1027_reg_1006(0) = '1') else 
        indvars_iv_load_reg_995;
    select_ln9_fu_388_p3 <= 
        add_ln9_1_fu_382_p2 when (icmp_ln1027_fu_376_p2(0) = '1') else 
        ap_sig_allocacmp_indvars_iv17_load;
        sext_ln186_1_cast_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln186_1),16));

        sext_ln186_2_cast_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln186_2),16));

        sext_ln186_3_cast_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln186_3),16));

        sext_ln186_4_cast_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln186_4),16));

        sext_ln186_5_cast_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln186_5),16));

        sext_ln186_6_cast_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln186_6),16));

        sext_ln186_7_cast_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln186_7),16));

        sext_ln186_8_cast_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln186_8),16));

        sext_ln186_cast_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln186),16));

        sext_ln840_10_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln840_8_reg_1178),21));

        sext_ln840_11_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln840_10_reg_1183),19));

        sext_ln840_12_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln840_11_fu_702_p2),18));

        sext_ln840_13_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln840_12_reg_1188),19));

        sext_ln840_14_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln840_13_fu_746_p2),21));

        sext_ln840_1_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1494_1_reg_1043),17));

        sext_ln840_2_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1494_2_reg_1063),18));

        sext_ln840_3_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1494_3_reg_1073),17));

        sext_ln840_4_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1494_4_reg_1098),17));

        sext_ln840_5_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1494_5_reg_1108),17));

        sext_ln840_6_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1494_6_reg_1133),21));

        sext_ln840_7_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1494_7_reg_1143),18));

        sext_ln840_8_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1494_8_reg_1163),17));

        sext_ln840_9_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln840_7_reg_1158),18));

        sext_ln840_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1494_fu_671_p2),17));

    tmp_1_fu_824_p3 <= add_ln840_14_reg_1203(20 downto 20);
    trunc_ln840_1_fu_431_p1 <= mul_ln1494_1_fu_426_p2(8 - 1 downto 0);
    trunc_ln840_2_fu_464_p1 <= mul_ln1494_2_fu_459_p2(8 - 1 downto 0);
    trunc_ln840_3_fu_477_p1 <= mul_ln1494_3_fu_472_p2(8 - 1 downto 0);
    trunc_ln840_4_fu_513_p1 <= mul_ln1494_4_fu_508_p2(8 - 1 downto 0);
    trunc_ln840_5_fu_526_p1 <= mul_ln1494_5_fu_521_p2(8 - 1 downto 0);
    trunc_ln840_6_fu_592_p1 <= mul_ln1494_6_fu_587_p2(8 - 1 downto 0);
    trunc_ln840_7_fu_605_p1 <= mul_ln1494_7_fu_600_p2(8 - 1 downto 0);
    trunc_ln840_8_fu_650_p1 <= mul_ln1494_8_fu_645_p2(8 - 1 downto 0);
    trunc_ln840_fu_680_p1 <= mul_ln1494_fu_671_p2(8 - 1 downto 0);
    trunc_ln9_fu_807_p1 <= select_ln9_2_fu_800_p3(2 - 1 downto 0);
    zext_ln1495_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln9_1_fu_787_p3),4));
    zext_ln186_10_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln840_1_fu_435_p2),64));
    zext_ln186_11_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln14_fu_445_p2),64));
    zext_ln186_12_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln840_2_fu_481_p2),64));
    zext_ln186_13_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln840_3_fu_491_p2),64));
    zext_ln186_14_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln14_1_fu_530_p2),64));
    zext_ln186_15_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln840_4_fu_541_p2),64));
    zext_ln186_16_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln840_5_fu_609_p2),64));
    zext_ln186_9_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln840_fu_401_p2),64));
    zext_ln541_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_867_p2),64));
end behav;
