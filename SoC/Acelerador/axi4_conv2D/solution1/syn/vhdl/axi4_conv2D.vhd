-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axi4_conv2D is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    image_in_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    image_in_ce0 : OUT STD_LOGIC;
    image_in_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    image_in_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    image_in_ce1 : OUT STD_LOGIC;
    image_in_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    image_out_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    image_out_ce0 : OUT STD_LOGIC;
    image_out_we0 : OUT STD_LOGIC;
    image_out_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weights_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    weights_ce0 : OUT STD_LOGIC;
    weights_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    weights_ce1 : OUT STD_LOGIC;
    weights_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of axi4_conv2D is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "axi4_conv2D_axi4_conv2D,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.092000,HLS_SYN_LAT=91,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=672,HLS_SYN_LUT=1198,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal weights_load_reg_180 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal weights_load_1_reg_195 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal weights_load_2_reg_200 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights_load_3_reg_215 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal weights_load_4_reg_220 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights_load_5_reg_235 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal weights_load_6_reg_240 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_165_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal empty_reg_255 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal trunc_ln840_fu_170_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln840_reg_260 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights_load_7_reg_265 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights_load_8_reg_270 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_ap_start : STD_LOGIC;
    signal grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_ap_done : STD_LOGIC;
    signal grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_ap_idle : STD_LOGIC;
    signal grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_ap_ready : STD_LOGIC;
    signal grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_image_in_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_image_in_ce0 : STD_LOGIC;
    signal grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_image_in_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_image_in_ce1 : STD_LOGIC;
    signal grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_image_out_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_image_out_ce0 : STD_LOGIC;
    signal grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_image_out_we0 : STD_LOGIC;
    signal grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_image_out_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component axi4_conv2D_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        image_in_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        image_in_ce0 : OUT STD_LOGIC;
        image_in_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        image_in_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        image_in_ce1 : OUT STD_LOGIC;
        image_in_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        sext_ln186 : IN STD_LOGIC_VECTOR (7 downto 0);
        sext_ln186_1 : IN STD_LOGIC_VECTOR (7 downto 0);
        sext_ln186_2 : IN STD_LOGIC_VECTOR (7 downto 0);
        sext_ln186_3 : IN STD_LOGIC_VECTOR (7 downto 0);
        sext_ln186_4 : IN STD_LOGIC_VECTOR (7 downto 0);
        sext_ln186_5 : IN STD_LOGIC_VECTOR (7 downto 0);
        sext_ln186_6 : IN STD_LOGIC_VECTOR (7 downto 0);
        sext_ln186_7 : IN STD_LOGIC_VECTOR (7 downto 0);
        sext_ln186_8 : IN STD_LOGIC_VECTOR (7 downto 0);
        acc_V : IN STD_LOGIC_VECTOR (20 downto 0);
        trunc_ln : IN STD_LOGIC_VECTOR (7 downto 0);
        image_out_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        image_out_ce0 : OUT STD_LOGIC;
        image_out_we0 : OUT STD_LOGIC;
        image_out_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144 : component axi4_conv2D_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_ap_start,
        ap_done => grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_ap_done,
        ap_idle => grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_ap_idle,
        ap_ready => grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_ap_ready,
        image_in_address0 => grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_image_in_address0,
        image_in_ce0 => grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_image_in_ce0,
        image_in_q0 => image_in_q0,
        image_in_address1 => grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_image_in_address1,
        image_in_ce1 => grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_image_in_ce1,
        image_in_q1 => image_in_q1,
        sext_ln186 => weights_load_reg_180,
        sext_ln186_1 => weights_load_1_reg_195,
        sext_ln186_2 => weights_load_2_reg_200,
        sext_ln186_3 => weights_load_3_reg_215,
        sext_ln186_4 => weights_load_4_reg_220,
        sext_ln186_5 => weights_load_5_reg_235,
        sext_ln186_6 => weights_load_6_reg_240,
        sext_ln186_7 => weights_load_7_reg_265,
        sext_ln186_8 => weights_load_8_reg_270,
        acc_V => empty_reg_255,
        trunc_ln => trunc_ln840_reg_260,
        image_out_address0 => grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_image_out_address0,
        image_out_ce0 => grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_image_out_ce0,
        image_out_we0 => grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_image_out_we0,
        image_out_d0 => grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_image_out_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_ap_ready = ap_const_logic_1)) then 
                    grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                empty_reg_255 <= empty_fu_165_p1;
                trunc_ln840_reg_260 <= trunc_ln840_fu_170_p1;
                weights_load_7_reg_265 <= weights_q0;
                weights_load_8_reg_270 <= weights_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                weights_load_1_reg_195 <= weights_q1;
                weights_load_2_reg_200 <= weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                weights_load_3_reg_215 <= weights_q0;
                weights_load_4_reg_220 <= weights_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                weights_load_5_reg_235 <= weights_q0;
                weights_load_6_reg_240 <= weights_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                weights_load_reg_180 <= weights_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_ap_done, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_ap_done)
    begin
        if ((grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_ap_done, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_ap_done, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_165_p1 <= bias(21 - 1 downto 0);
    grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_ap_start <= grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_ap_start_reg;
    image_in_address0 <= grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_image_in_address0;
    image_in_address1 <= grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_image_in_address1;
    image_in_ce0 <= grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_image_in_ce0;
    image_in_ce1 <= grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_image_in_ce1;
    image_out_address0 <= grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_image_out_address0;
    image_out_ce0 <= grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_image_out_ce0;
    image_out_d0 <= grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_image_out_d0;
    image_out_we0 <= grp_axi4_conv2D_Pipeline_VITIS_LOOP_9_1_VITIS_LOOP_10_2_fu_144_image_out_we0;
    trunc_ln840_fu_170_p1 <= bias(8 - 1 downto 0);

    weights_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            weights_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            weights_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            weights_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            weights_address0 <= "XXXX";
        end if; 
    end process;


    weights_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            weights_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            weights_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            weights_address1 <= "XXXX";
        end if; 
    end process;


    weights_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            weights_ce0 <= ap_const_logic_1;
        else 
            weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            weights_ce1 <= ap_const_logic_1;
        else 
            weights_ce1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
